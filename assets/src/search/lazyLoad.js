import { performSearch } from './searchPagination'

let observer = null
let lazyLoadTimeout = null;

export function enableLazyLoading(resultsContainer, query) {
    if (!query) {
        return
    }

    if (observer) {
        observer.disconnect()
    }

    observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    const loadMoreButton = document.getElementById('load-more')

                    if (loadMoreButton && !lazyLoadTimeout) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                        loadMoreButton.innerText = 'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...'

                        console.log('üìå –ó–∞–ø—É—Å–∫–∞–µ–º performSearch –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Å query:', query)

                        // –í—ã–∑—ã–≤–∞–µ–º performSearch, –Ω–æ –±–µ–∑ `.then()`, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise
                        lazyLoadTimeout = setTimeout(() => {
                            performSearch(query, resultsContainer, true);
                            lazyLoadTimeout = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                        }, 500);
                    }
                }
            })
        },
        {
            root: resultsContainer,
            rootMargin: '0px',
            threshold: 1.0,
        },
    )

    const loadMoreButton = document.getElementById('load-more')
    if (loadMoreButton) {
        observer.observe(loadMoreButton)
    }
}
