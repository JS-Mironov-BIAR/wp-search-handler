import { performSearch } from './searchPagination';

let observer = null;

export function enableLazyLoading(resultsContainer, query) {
    if (!query) {
        console.error("‚ùå –û—à–∏–±–∫–∞: query –≤ enableLazyLoading –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω!");
        return;
    }

    if (observer) {
        observer.disconnect();
    }

    observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const loadMoreButton = document.getElementById('load-more');

                if (loadMoreButton) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    loadMoreButton.innerText = "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...";

                    console.log("üìå –ó–∞–ø—É—Å–∫–∞–µ–º performSearch –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Å query:", query);

                    // –í—ã–∑—ã–≤–∞–µ–º performSearch, –Ω–æ –±–µ–∑ `.then()`, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise
                    performSearch(query, resultsContainer, true);

                    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    setTimeout(() => {
                        const newLoadMoreButton = document.getElementById('load-more');
                        if (newLoadMoreButton) {
                            newLoadMoreButton.remove();
                        }
                    }, 1000); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                }
            }
        });
    }, {
        root: resultsContainer,
        rootMargin: '0px',
        threshold: 1.0
    });

    const loadMoreButton = document.getElementById('load-more');
    if (loadMoreButton) {
        observer.observe(loadMoreButton);
    }
}
